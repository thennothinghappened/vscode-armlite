{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.armlite",
  "name": "ARMLite Assembly",
  "fileTypes": [
    "asm",
    "armlite"
  ],
  "patterns": [
    {
      "match": "^\\s*[#\\.](define|include|(end|el|else)?if|if(def|ndef)?|else)(\\s+(defined\\(\\w+\\)|\\w+)(\\s+(&&|\\|\\|)\\s+defined\\(\\w+\\)|\\w]+)*)?\\b",
      "name": "meta.preprocessor"
    },
    {
      "match": "^\\s*\\.?\\w+:\\s*(?=$|;)",
      "name": "routine.armlite"
    },
    {
      "match": "\\b(?i)(?:v?(?:add|cvt|bic|sub|trn|cmp|cb(?:z|nz)|[us]?div|qdmulh|mul|ld1|qadd|qshrun|st[1234]|addw|mull|mlal|rshrn|swp|qmovunand|m(?:rs|sr)|eor|sub|rsb|adc|sbc|rsc|and|tst|teq|cmp|cmn|orr|mov|bic|mvn|neg|lsr|lsl|ror|asr)|mul|mla|mull|smlabb|rev(?:8|16)?|pld|adr|adrl|vswp)(?:(?:(?=s)s(\\w{2})?)|(\\w{2})s?)?(?-i)\\b",
      "name": "support.function.mnemonic.arithmetic.armlite",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.arithmetic.armlite"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.armlite"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.arithmetic.armlite"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.armlite"
            }
          ]
        }
      }
    },
    {
      "match": "\\b(?i)v?(?:ldr|str)(?:d(\\w{2})?|(?:(?:s?b|s?h)(\\w{2})?|(\\w{2})(?:s?b|s?h)?))(?-i)\\b",
      "name": "support.function.mnemonic.memory.armlite",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.memory.armlite"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.armlite"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.memory.armlite"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.armlite"
            }
          ]
        },
        "3": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.memory.armlite"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.armlite"
            }
          ]
        }
      }
    },
    {
      "match": "\\b(?i)(?:ldar[bh]?|ldax[pb(?:rh?)]|ldn?p|ldpsw|ldr[bh]?|ldrsb|ldrsh|ldrsw|ldtr[bh]?|ldtrsw|ldurb?|ldursb|ldursh|ldursw|ldx[pr]|ldxr[bh])(?-i)\\b",
      "name": "support.function.mnemonic.memory.armlite"
    },
    {
      "match": "\\b(?i)(?:prfu?m)(?-i)\\b",
      "name": "support.function.mnemonic.memory.armlite"
    },
    {
      "match": "\\b(?i)(?:stlr[bh]?|stlx[pb(?:rh?)]|stn?p|str[bh]?|sttr[bh]?|stur[nh]?|stx[pb(?:rh?)])(?-i)\\b",
      "name": "support.function.mnemonic.memory.armlite"
    },
    {
      "match": "\\b(?i)(dc[dubi](?:[qw]u?)?)|area|space|fill\\b",
      "name": "support.function.mnemonic.memory.armlite"
    },
    {
      "match": "\\b(?i)(?:ldm(?:ia)?|ldmf[da]|ldmd[ab]|ldmea|ldmib|ldmed|v?(?:push|pop)|stm(?:ia)?|stmd[ab]|stmed|stmfd|stmib|smfa(?:\\.n|\\.w)?)(?-i)\\b",
      "name": "support.function.mnemonic.multiple.armlite"
    },
    {
      "match": "\\b(?i)(?:mov(?:w|t)?|pac(?:dz?[a|b]|ga|i(?:[a|b](?:1716|sp|z)?)|z[a|b])|swi|svc|hvc|dmb|clrex|dsb|isb|tlbi|b(?:l|l?x|l?r)?|(?:i|e)?ret(?:aa|ab)?)(?:(?:(?=s)s(\\w{2})?)|(\\w{2})s?)?(?-i)\\b",
      "name": "support.function.mnemonic.memory.armlite",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.memory.armlite"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.armlite"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.memory.armlite"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.armlite"
            }
          ]
        }
      }
    },
    {
      "match": "\\b(?i)((wf[ei])|cps(i[de])?)(?-i)\\b",
      "name": "keyword.control.cpu.armlite"
    },
    {
      "match": "\\b(?i)(def(b|w|s)|equ\\s.+\\.s)(?-i)\\b",
      "name": "keyword.control.define.armlite"
    },
    {
      "name": "keyword.control.directive.armlite",
      "match": "\\.(?i)(globl|global|extern|weak|macro|endm|purgem|section|text|data|bss|arm|align|balign|irp|rept|endr|(un)?req|error|short|(end)?func|hidden|type|cpu|fpu|arch|code|syntax|altmacro|object_arch|word|int|string|thumb(_set)?|set|pragma|undef|line|get)(?-i)\\b"
    },
    {
      "match": "\\b\\=",
      "name": "keyword.control.evaluation"
    },
    {
      "match": "\\b(?i)nop(\\w+)?(?-i)\\b",
      "name": "comment.nop.armlite",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "comment.nop.armlite"
            },
            {
              "match": "\\w+",
              "name": "invalid.illegal.condition.armlite"
            }
          ]
        }
      }
    },
    {
      "name": "storage.memaddress.armlite",
      "match": "\\[[ \\t]*(\\w+),[ \\t]*([a-zA-Z0-9#-_]+)[ \\t]*\\]!?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#registers"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#numerics"
            },
            {
              "include": "#registers"
            },
            {
              "include": "#variables"
            }
          ]
        }
      }
    },
    {
      "name": "storage.stack.armlite",
      "begin": "\\{\\h*",
      "end": "\\h*\\}\\^?",
      "patterns": [
        {
          "include": "#registers_list"
        }
      ]
    },
    {
      "include": "#registers"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numerics"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "comments": {
      "begin": "(;|//)",
      "while": "^\\s*(;|//)",
      "name": "comment.armlite",
      "contentName": "comment.armlite.meta.embedded.markdown",
      "patterns": [
        { "include": "text.html.markdown" }
      ]
    },
    "conditions": {
      "patterns": [
        {
          "match": "ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al"
        }
      ]
    },
    "numerics": {
      "patterns": [
        {
          "match": "#?-?(0x|&)[0-9a-fA-F_]+\\b",
          "name": "constant.numeric.hex.armlite"
        },
        {
          "match": "#?[0-9]+\\b",
          "name": "constant.numeric.dec.armlite"
        },
        {
          "match": "#?0b[01]+\\b",
          "name": "constant.numeric.bin.armlite"
        }
      ]
    },
    "registers": {
      "patterns": [
        {
          "match": "\\b(?i)([rcp]([0-9]|1[0-5])|[xwbhsdq]([0-9]|1[0-9]|2[0-9]|3[0-1])|wzr|xzr|wsp|fpsr|fpcr|a[1-4]|v([0-9]|1[0-9]|2[0-9]|3[0-1])\\.(16b|8[b|h]|4[s|h]|2[s|d])|sl|sb|fp|ip|sp|lr|(c|s)psr(_c)?|pc|fpsid|fpscr|fpexc|APSR_nzcv|sy)(?-i)(!|\\b)",
          "name": "storage.register.armlite"
        }
      ]
    },
    "registers_list": {
      "patterns": [
        {
          "match": "(\\w+)(?:\\h*\\-\\h*(\\w+))?(?:,\\h*([a-zA-Z0-9,\\-\\h]+))?",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#registers"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "#registers"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#registers_list"
                }
              ]
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.armlite",
          "begin": "\"",
          "end": "\""
        },
        {
          "match": "\\'\\S\\'",
          "name": "string.char.armlite"
        },
        {
          "name": "invalid.illegal.string.armlite",
          "match": "\"[^\"]+$"
        },
        {
          "name": "invalid.illegal.char.armlite",
          "match": "\\'\\S{2,}\\'"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "(\\b|#)-?[a-zA-Z_][0-9a-zA-Z_]*\\b",
          "name": "variable.named.armlite"
        }
      ]
    }
  }
}
